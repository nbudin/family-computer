name: App build
on:
  release:
    types: [published]

jobs:
  build_linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        arch:
          - x86_64
          - aarch64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: rustup target add ${{ matrix.arch }}-linux-gnu
      - uses: taiki-e/install-action@cargo-make
      - run: CARGO_MAKE_RUST_TARGET_ARCH=${{ matrix.arch }} cargo make build
      - run: mv target/${{ matrix.arch }}-linux-gnu/release/family-computer ./family-computer-linux-${{ matrix.arch }}-${{ github.event.release.tag_name }}
      - run: gzip ./family-computer-linux-${{ matrix.arch }}-${{ github.event.release.tag_name }}
      - name: upload Linux ${{ matrix.arch }} release artifact
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: gh release upload ${{ github.event.release.tag_name }} ./family-computer-linux-${{ matrix.arch }}-${{ github.event.release.tag_name }}.gz

  build_mac:
    runs-on: self-hosted
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          NOTARIZATION_APPLE_ID: ${{ secrets.NOTARIZATION_APPLE_ID }}
          NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
          NOTARIZATION_TEAM_ID: ${{ secrets.NOTARIZATION_TEAM_ID }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import DeveloperIDG2CA.cer -k $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # set up notarization profile
          xcrun notarytool store-credentials "notarytool-profile" --keychain $KEYCHAIN_PATH --apple-id "$NOTARIZATION_APPLE_ID" --team-id "$NOTARIZATION_TEAM_ID" --password "$NOTARIZATION_PASSWORD"
      - uses: dtolnay/rust-toolchain@stable
      - run: rustup target add aarch64-apple-darwin
      - run: rustup target add x86_64-apple-darwin
      - uses: taiki-e/install-action@cargo-make
      - run: KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db cargo make build-package
      - name: Notarize app
        run: |
          ditto -c -k --keepParent "target/universal-apple-darwin/release/Family Computer.app" "notarization.zip"
          xcrun notarytool submit "notarization.zip" --keychain $RUNNER_TEMP/app-signing.keychain-db --keychain-profile "notarytool-profile" --wait
          xcrun stapler staple "target/universal-apple-darwin/release/Family Computer.app"
      - run: mv target/universal-apple-darwin/release/Family\ Computer.app .
      - run: zip -r FamilyComputer-mac-universal-${{ github.event.release.tag_name }}.zip Family\ Computer.app
      - name: upload macOS release artifact
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: gh release upload ${{ github.event.release.tag_name }} FamilyComputer-mac-universal-${{ github.event.release.tag_name }}.zip
