name: App build
on:
  release:
    types: [published]

jobs:
  build:
    strategy:
      matrix:
        platform:
          - os: windows
            cargo_target: x86_64-pc-windows-msvc
            build_command: cargo make build
            build_artifact: "target\\release\\family-computer.exe"
            executable_filename: family-computer.exe
            release_upload_prefix: family-computer-windows-x64
            runs_on: windows-latest
          - os: linux
            dpkg_arch: amd64
            cargo_target: x86_64-unknown-linux-gnu
            build_command: CARGO_MAKE_RUST_TARGET_TRIPLE=x86_64-unknown-linux-gnu cargo make build
            build_artifact: target/release/family-computer
            executable_filename: family-computer
            release_upload_prefix: family-computer-linux-x86_64
            runs_on: ubuntu-latest
          # - os: linux
          #   dpkg_arch: arm64
          #   cargo_target: aarch64-unknown-linux-gnu
          #   build_command: CARGO_MAKE_RUST_TARGET_TRIPLE=aarch64-unknown-linux-gnu cargo make build
          #   build_artifact: target/aarch64-unknown-linux-gnu/release/family-computer
          #   executable_filename: family-computer
          #   release_upload_prefix: family-computer-linux-aarch64
          #   runs_on: ubuntu-latest
          - os: macos
            build_command: KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db cargo make build-package
            build_artifact: target/universal-apple-darwin/release/Family Computer.app
            executable_filename: Family Computer.app
            release_upload_prefix: family-computer-macos-universal
            runs_on: self-hosted

    runs-on: ${{ matrix.platform.runs_on }}
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - if: ${{ matrix.platform.os == 'linux' }}
        run: sudo dpkg --add-architecture ${{ matrix.platform.dpkg_arch }}
      - if: ${{ matrix.platform.os == 'linux' }}
        run: sudo apt-get update && sudo apt-get install -y libasound2-dev:${{ matrix.platform.dpkg_arch }} build-essential:${{ matrix.platform.dpkg_arch }}
      - if: ${{ matrix.platform.os == 'macos' }}
        name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          NOTARIZATION_APPLE_ID: ${{ secrets.NOTARIZATION_APPLE_ID }}
          NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
          NOTARIZATION_TEAM_ID: ${{ secrets.NOTARIZATION_TEAM_ID }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import DeveloperIDG2CA.cer -k $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # set up notarization profile
          xcrun notarytool store-credentials "notarytool-profile" --keychain $KEYCHAIN_PATH --apple-id "$NOTARIZATION_APPLE_ID" --team-id "$NOTARIZATION_TEAM_ID" --password "$NOTARIZATION_PASSWORD"

      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - if: ${{ matrix.platform.os == 'macos' }}
        run: rustup target add aarch64-apple-darwin && rustup target add x86_64-apple-darwin
      - if: ${{ matrix.platform.os != 'macos' }}
        run: rustup target add ${{ matrix.platform.cargo_target }}
      - uses: taiki-e/install-action@cargo-make
      - run: ${{ matrix.platform.build_command }}
      - if: ${{ matrix.platform.os == 'macos' }}
        name: Notarize app
        run: |
          ditto -c -k --keepParent "target/universal-apple-darwin/release/Family Computer.app" "notarization.zip"
          xcrun notarytool submit "notarization.zip" --keychain $RUNNER_TEMP/app-signing.keychain-db --keychain-profile "notarytool-profile" --wait
          xcrun stapler staple "target/universal-apple-darwin/release/Family Computer.app"
      - if: ${{ matrix.platform.os != 'windows' }}
        run: mv "${{ matrix.platform.build_artifact }}" "./${{ matrix.platform.executable_filename }}"
      - if: ${{ matrix.platform.os == 'windows' }}
        run: move "${{ matrix.platform.build_artifact }}" ".\${{ matrix.platform.executable_filename }}"
      - run: zip -r ${{ matrix.platform.release_upload_prefix }}-${{ github.event.release.tag_name }}.zip "${{ matrix.platform.executable_filename }}"
      - name: upload release artifact
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: gh release upload ${{ github.event.release.tag_name }} ${{ matrix.platform.release_upload_prefix }}-${{ github.event.release.tag_name }}.zip
